# Standard library for list functionality

export *

let rec length = (lst) => {
  match (lst) {
    | [] => 0
    | [hd, ...tl] => 1 + length(tl)
  }
}

let rec sum = (lst) => {
  match (lst) {
    | [] => 0
    | [hd, ...tl] => hd + sum(tl)
  }
}

let reverse = (lst) => {
  let rec help = (l, acc) => {
    match (l) {
      | [] => acc
      | [hd, ...tl] => help(tl, [hd, ...acc])
    }
  }
  help(lst, [])
}

let rec append = (l1, l2) => {
  match (l1) {
    | [] => l2
    | [hd, ...tl] => [hd, ...append(tl, l2)]
  }
}

let rec contains = (e, l) => {
  match (l) {
    | [] => false
    | [hd, ...tl] => (hd == e) || contains(e, tl)
  }
}

let rec foldLeft = (f, b, l) => {
  match (l) {
    | [] => b
    | [hd, ...tl] => foldLeft(f, f(b, hd), tl)
  }
}

let rec foldRight = (f, b, l) => {
  match (l) {
    | [] => b
    | [hd, ...tl] => f(hd, foldRight(f, b, tl))
  }
}

let rec map = (f, l) => {
  match (l) {
    | [] => []
    | [hd, ...tl] => [f(hd), ...map(f, tl)]
  }
}

let mapi = (fn, list) => {
  let rec help = (fn, list, index) => {
    match (list) {
      | [] => []
      | [hd, ...tl] => [fn(hd, index), ...help(fn, tl, index + 1)]
    }
  }
  help(fn, list, 0)
}

let every = (f, l) => {
  foldLeft((acc, item) => { acc && f(item) }, true, l)
}

let rec forEach = (f, l) => {
  match (l) {
    | [] => void
    | [hd, ...tl] => {
      f(hd)
      forEach(f, tl)
    }
  }
}

let forEachi = (f, l) => {
  let rec help = (f, l, c) => {
    match (l) {
      | [] => void
      | [hd, ...tl] => {
        f(hd, c)
        help(f, tl, c + 1)
      }
    }
  }
  help(f, l, 0)
}
