export *

# Math operations
import foreign wasm numberIncr : Number -> Number as incr from 'stdlib-external/runtime'
import foreign wasm numberDecr : Number -> Number as decr from 'stdlib-external/runtime'
import foreign wasm numberPlus : (Number, Number) -> Number as (+) from 'stdlib-external/runtime'
import foreign wasm numberMinus : (Number, Number) -> Number as (-) from 'stdlib-external/runtime'
import foreign wasm numberTimes : (Number, Number) -> Number as (*) from 'stdlib-external/runtime'
import foreign wasm numberDivide : (Number, Number) -> Number as (/) from 'stdlib-external/runtime'
import foreign wasm numberMod : (Number, Number) -> Number as (%) from 'stdlib-external/runtime'

# Number comparisons
import foreign wasm numberLess : (Number, Number) -> Bool as (<) from 'stdlib-external/runtime'
import foreign wasm numberGreater : (Number, Number) -> Bool as (>) from 'stdlib-external/runtime'
import foreign wasm numberLessEqual : (Number, Number) -> Bool as (<=) from 'stdlib-external/runtime'
import foreign wasm numberGreaterEqual : (Number, Number) -> Bool as (>=) from 'stdlib-external/runtime'

# Number bit/logical operations
import foreign wasm numberLnot : Number -> Number as lnot from 'stdlib-external/runtime'

import foreign wasm numberLand : (Number, Number) -> Number as land from 'stdlib-external/runtime'
import foreign wasm numberLor : (Number, Number) -> Number as lor from 'stdlib-external/runtime'
import foreign wasm numberLxor : (Number, Number) -> Number as lxor from 'stdlib-external/runtime'

import foreign wasm numberLsl : (Number, Number) -> Number as lsl from 'stdlib-external/runtime'
import foreign wasm numberLsr : (Number, Number) -> Number as lsr from 'stdlib-external/runtime'
import foreign wasm numberAsr : (Number, Number) -> Number as asr from 'stdlib-external/runtime'


# Number coercions & conversions
import foreign wasm coerceInt64ToNumber : Int64 -> Number from 'stdlib-external/runtime'
import foreign wasm coerceInt32ToNumber : Int32 -> Number from 'stdlib-external/runtime'
import foreign wasm coerceFloat64ToNumber : Float64 -> Number from 'stdlib-external/runtime'
import foreign wasm coerceFloat32ToNumber : Float32 -> Number from 'stdlib-external/runtime'
import foreign wasm coerceRationalToNumber : Rational -> Number from 'stdlib-external/runtime'
import foreign wasm coerceNumberToInt64 : Number -> Int64 from 'stdlib-external/runtime'
import foreign wasm coerceNumberToInt32 : Number -> Int32 from 'stdlib-external/runtime'
import foreign wasm coerceNumberToRational : Number -> Rational from 'stdlib-external/runtime'
import foreign wasm coerceNumberToFloat64 : Number -> Float64 from 'stdlib-external/runtime'
import foreign wasm coerceNumberToFloat32 : Number -> Float32 from 'stdlib-external/runtime'

import foreign wasm convertExactToInexact : Number -> Number from 'stdlib-external/runtime'
import foreign wasm convertInexactToExact : Number -> Number from 'stdlib-external/runtime'

# Boolean operations
primitive (!) : Bool -> Bool = "@not"
primitive (&&) : (Bool, Bool) -> Bool = "@and"
primitive (||) : (Bool, Bool) -> Bool = "@or"

# String operations
import foreign wasm concat : (String, String) -> String as (++) from 'stdlib-external/runtime'

# Box operations
primitive box : a -> Box<a> = "@box"
primitive unbox : Box<a> -> a = "@unbox"
primitive (^) : Box<a> -> a = "@unbox"

# Other operations
primitive ignore : a -> Void = "@ignore"
primitive assert : Bool -> Void = "@assert"
primitive fail : String -> a = "@fail"

# Prints the given value to the console.
import foreign wasm print : a -> Void from 'grainBuiltins'

# Checks the given items for structural equality.
import foreign wasm equal : (a, a) -> Bool as (==) from 'stdlib-external/runtime'
let (!=) : (a, a) -> Bool = (x, y) => !(x == y)
# Checks the given items for physical equality.
primitive (is) : (a, a) -> Bool = "@eq"

# Converts the given value to a string
import foreign wasm toString : a -> String from 'grainBuiltins'

export data List<a> = [] | [...](a, List<a>)

# Maybe some data, maybe not!
data Option<a> = Some(a) | None

# Maybe some data, maybe an error!
data Result<t, e> = Ok(t) | Err(e)

# Identity function
let identity = (x) => x