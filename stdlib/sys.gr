import List from 'lists'
import Array from 'arrays'
import Int64 from 'int64'

export *

import foreign wasm argv : () -> Array<String> from 'stdlib-external/sys'
import foreign wasm env : () -> Array<String> from 'stdlib-external/sys'

import foreign wasm realTime : () -> Int64 from 'stdlib-external/sys'
import foreign wasm monotonicTime : () -> Int64 from 'stdlib-external/sys'
import foreign wasm processCpuTime : () -> Int64 from 'stdlib-external/sys'
import foreign wasm threadCpuTime : () -> Int64 from 'stdlib-external/sys'

data FileDescriptor =
  FileDescriptor(Number)

let stdin = FileDescriptor(0)
let stdout = FileDescriptor(1)
let stderr = FileDescriptor(2)
let pwdfd = FileDescriptor(3)

data LookupFlag =
  # Follow symlinks
  SymlinkFollow

data OpenFlag =
  # Create file if it does not exist.
  | Create
  # Fail if not a directory.
  | Directory
  # Fail if file already exists.
  | Exclusive
  # Truncate file to size 0.
  | Truncate

data Rights =
  # The right to invoke `fd_datasync`.

  # If `path_open` is set, includes the right to invoke
  # `path_open` with `fdflags::dsync`.
  | FdDatasync
  # The right to invoke `fd_read` and `sock_recv`.

  # If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
  | FdRead
  # The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
  | FdSeek
  # The right to invoke `fd_fdstat_set_flags`.
  | FdFdstatSetFlags
  # The right to invoke `fd_sync`.

  # If `path_open` is set, includes the right to invoke
  # `path_open` with `fdflags::rsync` and `fdflags::dsync`.
  | FdSync
  # The right to invoke `fd_seek` in such a way that the file offset
  # remains unaltered (i.e., `whence::cur` with offset zero), or to
  # invoke `fd_tell`.
  | FdTell
  # The right to invoke `fd_write` and `sock_send`.
  # If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
  | FdWrite
  # The right to invoke `fd_advise`.
  | FdAdvise
  # The right to invoke `fd_allocate`.
  | FdAllocate
  # The right to invoke `path_create_directory`.
  | PathCreateDirectory
  # If `path_open` is set, the right to invoke `path_open` with `oflags::creat`.
  | PathCreateFile
  # The right to invoke `path_link` with the file descriptor as the
  # source directory.
  | PathLinkSource
  # The right to invoke `path_link` with the file descriptor as the
  # target directory.
  | PathLinkTarget
  # The right to invoke `path_open`.
  | PathOpen
  # The right to invoke `fd_readdir`.
  | FdReaddir
  # The right to invoke `path_readlink`.
  | PathReadlink
  # The right to invoke `path_rename` with the file descriptor as the source directory.
  | PathRenameSource
  # The right to invoke `path_rename` with the file descriptor as the target directory.
  | PathRenameTarget
  # The right to invoke `path_filestat_get`.
  | PathFilestatGet
  # The right to change a file's size (there is no `path_filestat_set_size`).
  # If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
  | PathFilestatSetSize
  # The right to invoke `path_filestat_set_times`.
  | PathFilestatSetTimes
  # The right to invoke `fd_filestat_get`.
  | FdFilestatGet
  # The right to invoke `fd_filestat_set_size`.
  | FdFilestatSetSize
  # The right to invoke `fd_filestat_set_times`.
  | FdFilestatSetTimes
  # The right to invoke `path_symlink`.
  | PathSymlink
  # The right to invoke `path_remove_directory`.
  | PathRemoveDirectory
  # The right to invoke `path_unlink_file`.
  | PathUnlinkFile
  # If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
  # If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
  | PollFdReadwrite
  # The right to invoke `sock_shutdown`.
  | SockShutdown

data FdFlag =
  # Append mode: Data written to the file is always appended to the file's end.
  | Append
  # Write according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized.
  | Dsync
  # Non-blocking mode.
  | Nonblock
  # Synchronized read I/O operations.
  | Rsync
  # Write according to synchronized I/O file integrity completion. In
  # addition to synchronizing the data stored in the file, the implementation
  # may also synchronously update the file's metadata.
  | Sync

data Filetype =
  # The type of the file descriptor or file is unknown or is different from any of the other types specified.
  | Unknown
  # The file descriptor or file refers to a block device inode.
  | BlockDevice
  # The file descriptor or file refers to a character device inode.
  | CharacterDevice
  # The file descriptor or file refers to a directory inode.
  | Directory
  # The file descriptor or file refers to a regular file inode.
  | RegularFile
  # The file descriptor or file refers to a datagram socket.
  | SocketDatagram
  # The file descriptor or file refers to a byte-stream socket.
  | SocketStream
  # The file refers to a symbolic link inode.
  | SymbolicLink

data Whence =
  # Seek relative to start-of-file.
  | Set
  # Seek relative to current position.
  | Current
  # Seek relative to end-of-file.
  | End

data Stats = {
  filetype: Filetype,
  flags: List<FdFlag>,
  rights: List<Rights>,
  rightsInheriting: List<Rights>
}

data Filestats = {
  device: Int64,
  inode: Int64,
  filetype: Filetype,
  linkcount: Int64,
  size: Int64,
  accessed: Int64,
  modified: Int64,
  changed: Int64
}

data DirectoryEntry = {
  inode: Int64,
  filetype: Filetype,
  path: String
}

let filetypeFromNumber = (filetype) => {
  # [oscar] We need match guards like I need air to breathe
  if (filetype == 0) Unknown else
    if (filetype == 1) BlockDevice else
    if (filetype == 2) CharacterDevice else
    if (filetype == 3) Directory else
    if (filetype == 4) RegularFile else
    if (filetype == 5) SocketDatagram else
    if (filetype == 6) SocketStream else
    if (filetype == 7) SymbolicLink else
    fail "Unknown filetype"
}

import foreign wasm pathOpen : (FileDescriptor, List<LookupFlag>, String, List<OpenFlag>, List<Rights>, List<Rights>, List<FdFlag>) -> FileDescriptor from 'stdlib-external/sys'
import foreign wasm fdRead : (FileDescriptor, Number) -> (String, Number) from 'stdlib-external/sys'
import foreign wasm fdPread : (FileDescriptor, Int64, Number) -> (String, Number) from 'stdlib-external/sys'
import foreign wasm fdWrite : (FileDescriptor, String) -> Number from 'stdlib-external/sys'
import foreign wasm fdPwrite : (FileDescriptor, String, Int64) -> Number from 'stdlib-external/sys'
import foreign wasm fdAllocate : (FileDescriptor, Int64, Int64) -> Void from 'stdlib-external/sys'
import foreign wasm fdClose : (FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdDatasync : (FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdSync : (FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdStats : (FileDescriptor) -> (Number, Int64, Int64, Int64) as fdStatsRaw from 'stdlib-external/sys'
let fdStats = (fd) => {
  let (filetype, fdflags, rights, rightsInheriting) = fdStatsRaw(fd)

  let orderedFdflags = [
    Append,
    Dsync,
    Nonblock,
    Rsync,
    Sync
  ]

  let orderedRights = [
    FdDatasync,
    FdRead,
    FdSeek,
    FdFdstatSetFlags,
    FdSync,
    FdTell,
    FdWrite,
    FdAdvise,
    FdAllocate,
    PathCreateDirectory,
    PathCreateFile,
    PathLinkSource,
    PathLinkTarget,
    PathOpen,
    FdReaddir,
    PathReadlink,
    PathRenameSource,
    PathRenameTarget,
    PathFilestatGet,
    PathFilestatSetSize,
    PathFilestatSetTimes,
    FdFilestatGet,
    FdFilestatSetSize,
    FdFilestatSetTimes,
    PathSymlink,
    PathRemoveDirectory,
    PathUnlinkFile,
    PollFdReadwrite,
    SockShutdown
  ]

  let filetype = filetypeFromNumber(filetype)

  let (&&) = Int64.land
  let (>) = Int64.gt

  let fdflagsList = box([])
  List.for_each_i((flag, i) => {
    if ((fdflags && Int64.lsl(1L, i)) > 0L) {
      ignore(fdflagsList := [flag, ...^fdflagsList])
    }
  }, orderedFdflags)

  let rightsList = box([])
  List.for_each_i((flag, i) => {
    if ((rights && Int64.lsl(1L, i)) > 0L) {
      ignore(rightsList := [flag, ...^rightsList])
    }
  }, orderedRights)

  let rightsInheritingList = box([])
  List.for_each_i((flag, i) => {
    if (rightsInheriting && Int64.lsl(1L, i) > 0L) {
      ignore(rightsInheritingList := [flag, ...^rightsInheritingList])
    }
  }, orderedRights)
  
  { filetype, flags: ^fdflagsList, rights: ^rightsList, rightsInheriting: ^rightsInheritingList }
}
import foreign wasm fdSetFlags : (FileDescriptor, List<FdFlag>) -> Void from 'stdlib-external/sys'
import foreign wasm fdSetRights : (FileDescriptor, List<Rights>, List<Rights>) -> Void from 'stdlib-external/sys'
import foreign wasm fdFilestats : (FileDescriptor) -> (Int64, Int64, Number, Int64, Int64, Int64, Int64, Int64) as fdFilestatsRaw from 'stdlib-external/sys'
let fdFilestats = (fd) => {
  let (device, inode, filetype, linkcount, size, accessed, modified, changed) = fdFilestatsRaw(fd)

  let filetype = filetypeFromNumber(filetype)
  
  { device, inode, filetype, linkcount, size, accessed, modified, changed }
}
import foreign wasm fdSetSize : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'
import foreign wasm fdSetAccessTime : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'
import foreign wasm fdSetAccessTimeNow : (FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdSetModifiedTime : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'
import foreign wasm fdSetModifiedTimeNow : (FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdReaddir : (FileDescriptor) -> Array<(Int64, String, Number)> as fdReaddirRaw from 'stdlib-external/sys'
let fdReaddir = (fd) => {
  let dirents = fdReaddirRaw(fd)
  Array.map(dirents, (dirent) => {
    let (inode, path, filetype) = dirent
    let filetype = filetypeFromNumber(filetype)
    { inode, path, filetype }
  })
}
import foreign wasm fdRenumber : (FileDescriptor, FileDescriptor) -> Void from 'stdlib-external/sys'
import foreign wasm fdSeek : (FileDescriptor, Int64, Whence) -> Int64 from 'stdlib-external/sys'
import foreign wasm fdTell : (FileDescriptor) -> Int64 from 'stdlib-external/sys'

import foreign wasm pathCreateDirectory : (FileDescriptor, String) -> Void from 'stdlib-external/sys'
import foreign wasm pathFilestats : (FileDescriptor, List<LookupFlag>, String) -> (Int64, Int64, Number, Int64, Int64, Int64, Int64, Int64) as pathFilestatsRaw from 'stdlib-external/sys'
let pathFilestats = (fd, flags, path) => {
  let (device, inode, filetype, linkcount, size, accessed, modified, changed) = pathFilestatsRaw(fd, flags, path)

  let filetype = filetypeFromNumber(filetype)
  
  { device, inode, filetype, linkcount, size, accessed, modified, changed }
}
