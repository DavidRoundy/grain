export *

data Signal =
  # Hangup.
  | HUP
  # Terminate interrupt signal.
  | INT
  # Terminal quit signal.
  | QUIT
  # Illegal instruction.
  | ILL
  # Trace/breakpoint trap.
  | TRAP
  # Process abort signal.
  | ABRT
  # Access to an undefined portion of a memory object.
  | BUS
  # Erroneous arithmetic operation.
  | FPE
  # Kill.
  | KILL
  # User-defined signal 1.
  | USR1
  # Invalid memory reference.
  | SEGV
  # User-defined signal 2.
  | USR2
  # Write on a pipe with no one to read it.
  | PIPE
  # Alarm clock.
  | ALRM
  # Termination signal.
  | TERM
  # Child process terminated, stopped, or continued.
  | CHLD
  # Continue executing, if stopped.
  | CONT
  # Stop executing.
  | STOP
  # Terminal stop signal.
  | TSTP
  # Background process attempting read.
  | TTIN
  # Background process attempting write.
  | TTOU
  # High bandwidth data is available at a socket.
  | URG
  # CPU time limit exceeded.
  | XCPU
  # File size limit exceeded.
  | XFSZ
  # Virtual timer expired.
  | VTALRM
  | PROF
  | WINCH
  | POLL
  | PWR
  # Bad system call.
  | SYS


<<<<<<< HEAD
  let orderedFdflags = [
    Append,
    Dsync,
    Nonblock,
    Rsync,
    Sync
  ]

  let orderedRights = [
    FdDatasync,
    FdRead,
    FdSeek,
    FdSetFlags,
    FdSync,
    FdTell,
    FdWrite,
    FdAdvise,
    FdAllocate,
    PathCreateDirectory,
    PathCreateFile,
    PathLinkSource,
    PathLinkTarget,
    PathOpen,
    FdReaddir,
    PathReadlink,
    PathRenameSource,
    PathRenameTarget,
    PathFilestats,
    PathSetSize,
    PathSetTimes,
    FdFilestats,
    FdSetSize,
    FdSetTimes,
    PathSymlink,
    PathRemoveDirectory,
    PathUnlinkFile,
    PollFdReadwrite,
    SockShutdown
  ]

  let filetype = filetypeFromNumber(filetype)

  let (&&) = Int64.land
  let (>) = Int64.gt

  let fdflagsList = box([])
  List.forEachi((flag, i) => {
    if ((fdflags && Int64.lsl(1L, i)) > 0L) {
      ignore(fdflagsList := [flag, ...^fdflagsList])
    }
  }, orderedFdflags)

  let rightsList = box([])
  List.forEachi((flag, i) => {
    if ((rights && Int64.lsl(1L, i)) > 0L) {
      ignore(rightsList := [flag, ...^rightsList])
    }
  }, orderedRights)

  let rightsInheritingList = box([])
  List.forEachi((flag, i) => {
    if (rightsInheriting && Int64.lsl(1L, i) > 0L) {
      ignore(rightsInheritingList := [flag, ...^rightsInheritingList])
    }
  }, orderedRights)

  { filetype, flags: ^fdflagsList, rights: ^rightsList, rightsInheriting: ^rightsInheritingList }
}

# Update the flags associated with a file descriptor
# @param fd: FileDescriptor The file descriptor to update flags
import foreign wasm fdSetFlags : (FileDescriptor, List<FdFlag>) -> Void from 'stdlib-external/sys'

# Update the rights associated with a file descriptor
# @param rights: List<Rights> Rights to apply to the file descriptor
# @param rightsInheriting: List<Rights> Inheriting rights to apply to the file descriptor
import foreign wasm fdSetRights : (FileDescriptor, List<Rights>, List<Rights>) -> Void from 'stdlib-external/sys'

import foreign wasm fdFilestats : (FileDescriptor) -> (Int64, Int64, Number, Int64, Int64, Int64, Int64, Int64) from 'stdlib-external/sys'
# Retrieve information about a file
# @param fd: FileDescriptor The file descriptor of the file to retrieve information
# @returns Filestats A record containing the information about the file
let fdFilestats = (fd) => {
  let (device, inode, filetype, linkcount, size, accessed, modified, changed) = fdFilestats(fd)

  let filetype = filetypeFromNumber(filetype)

  { device, inode, filetype, linkcount, size, accessed, modified, changed }
}

# Set (truncate) the size of a file
# @param fd: FileDescriptor The file descriptor of the file to truncate
# @param size: Int64 The number of bytes to retain in the file
import foreign wasm fdSetSize : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'

# Set the access (created) time of a file
# @param fd: FileDescriptor The file descriptor of the file to update
# @param timestamp: Int64 The time to set
import foreign wasm fdSetAccessTime : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'

# Set the access (created) time of a file to the current time
# @param fd: FileDescriptor The file descriptor of the file to update
import foreign wasm fdSetAccessTimeNow : (FileDescriptor) -> Void from 'stdlib-external/sys'

# Set the modified time of a file
# @param fd: FileDescriptor The file descriptor of the file to update
# @param timestamp: Int64 The time to set
import foreign wasm fdSetModifiedTime : (FileDescriptor, Int64) -> Void from 'stdlib-external/sys'

# Set the modified time of a file to the current time
# @param fd: FileDescriptor The file descriptor of the file to update
import foreign wasm fdSetModifiedTimeNow : (FileDescriptor) -> Void from 'stdlib-external/sys'

import foreign wasm fdReaddir : (FileDescriptor) -> Array<(Int64, String, Number)> as fdReaddirRaw from 'stdlib-external/sys'
# Read the entires of a directory
# @param fd: FileDescriptor The directory to read
# @returns Array<DirectoryEntry> An array of records containing information about each entry in the directory
let fdReaddir = (fd) => {
  let dirents = fdReaddirRaw(fd)
  Array.map(dirents, (dirent) => {
    let (inode, path, filetype) = dirent
    let filetype = filetypeFromNumber(filetype)
    { inode, path, filetype }
  })
}

# Atomically replace a file descriptor by renumbering another file descriptor
# @param from: FileDescriptor The file descriptor to renumber
# @param to: FileDescriptor The file descriptor to overwrite
import foreign wasm fdRenumber : (FileDescriptor, FileDescriptor) -> Void from 'stdlib-external/sys'

# Update a file descriptor's offset
# @param fd: FileDescriptor The file descriptor to operate on
# @param delta: Int64 The number of bytes to move the offset
# @param whence: Whence The location from which the offset is relative
# @returns Int64 The new offset of the file descriptor, relative to the start of the file
import foreign wasm fdSeek : (FileDescriptor, Int64, Whence) -> Int64 from 'stdlib-external/sys'

# Read a file descriptor's offset
# @param fd: FileDescriptor The file descriptor to read the offset
# @returns Int64 The offset of the file descriptor, relative to the start of the file
import foreign wasm fdTell : (FileDescriptor) -> Int64 from 'stdlib-external/sys'


# Create a directory
# @param workingDirectory: FileDescriptor The directory in which path resolution starts
# @param path: String The path to the new directory
import foreign wasm pathCreateDirectory : (FileDescriptor, String) -> Void from 'stdlib-external/sys'

import foreign wasm pathFilestats : (FileDescriptor, List<LookupFlag>, String) -> (Int64, Int64, Number, Int64, Int64, Int64, Int64, Int64) as pathFilestatsRaw from 'stdlib-external/sys'
# Retrieve information about a file
# @param workingDirectory: FileDescriptor The directory in which path resolution starts
# @param flags: List<LookupFlag> Flags which affect path resolution
# @param path: String The path to retrieve information about
# @returns Filestats A record containing information about the file
let pathFilestats = (fd, flags, path) => {
  let (device, inode, filetype, linkcount, size, accessed, modified, changed) = pathFilestatsRaw(fd, flags, path)

  let filetype = filetypeFromNumber(filetype)

  { device, inode, filetype, linkcount, size, accessed, modified, changed }
}

# Set the access (created) time of a file
# @param workingDirectory: FileDescriptor The directory in which path resolution starts
# @param flags: List<LookupFlag> Flags which affect path resolution
# @param path: String The path to set the time
# @param timestamp: Int64 The time to set
import foreign wasm pathSetAccessTime : (FileDescriptor, List<LookupFlag>, String, Int64) -> Void from 'stdlib-external/sys'

# Set the access (created) time of a file to the current time
# @param workingDirectory: FileDescriptor The directory in which path resolution starts
# @param flags: List<LookupFlag> Flags which affect path resolution
# @param path: String The path to set the time
import foreign wasm pathSetAccessTimeNow : (FileDescriptor, List<LookupFlag>, String) -> Void from 'stdlib-external/sys'

# Set the modified time of a file
# @param workingDirectory: FileDescriptor The directory in which path resolution starts
# @param flags: List<LookupFlag> Flags which affect path resolution
# @param path: String The path to set the time
# @param timestamp: Int64 The time to set
import foreign wasm pathSetModifiedTime : (FileDescriptor, List<LookupFlag>, String, Int64) -> Void from 'stdlib-external/sys'
=======
# Access command line arguments
# @returns Array<String> The positional string arguments to the process
import foreign wasm argv : () -> Array<String> from 'stdlib-external/sys'
>>>>>>> Move all filesystem-related things to fs.gr

# Access environment variables
# @returns Array<String> The environment variables supplied to the process
import foreign wasm env : () -> Array<String> from 'stdlib-external/sys'


# Get the current time, in nanoseconds.
# Time value 0 corresponds with 1970-01-01T00:00:00Z.
# @returns Int64 The current time
import foreign wasm realTime : () -> Int64 from 'stdlib-external/sys'

# Get the time of the system's high-resolution clock, in nanoseconds.
# This system clock cannot be adjusted and cannot have negative time jumps.
# The epoch of this clock is undefined, and thus time value 0 is meaningless.
# Useful for calculation of precise time intervals.
# @returns Int64 The current time
import foreign wasm monotonicTime : () -> Int64 from 'stdlib-external/sys'

# Get the number of nanoseconds elapsed since the process began
# @returns Int64
import foreign wasm processCpuTime : () -> Int64 from 'stdlib-external/sys'

# Get the number of nanoseconds elapsed since the thread began
# @returns Int64
import foreign wasm threadCpuTime : () -> Int64 from 'stdlib-external/sys'

<<<<<<< HEAD
# Rename a file or directory
# @param sourceWorkingDirectory: FileDescriptor The directory in which the source path resolution starts
# @param sourcePath: String The path of the file to rename
# @param targetWorkingDirectory: FileDescriptor The directory in which the target path resolution starts
# @param targetPath: String The new path of the file
import foreign wasm pathRename : (FileDescriptor, String, FileDescriptor, String) -> Void from 'stdlib-external/sys'
=======
>>>>>>> Move all filesystem-related things to fs.gr

# Terminate the process normally
# @param code: Number The value to exit with. An exit code of 0 is considered normal, with other values having meaning depending on the platform
import foreign wasm exit : (Number) -> Void from 'stdlib-external/sys'

# Send a signal to the process of the calling thread
# @param signal: Signal The signal to send
import foreign wasm sigRaise : (Signal) -> Void from 'stdlib-external/sys'

# Yield execution to the calling thread
import foreign wasm schedYield : () -> Void from 'stdlib-external/sys'

# Produce a random number. This function can be slow, so it's best to seed a generator if lots of random data is needed
# @returns Number
import foreign wasm random : () -> Number from 'stdlib-external/sys'
