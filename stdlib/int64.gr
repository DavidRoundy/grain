export *

import foreign wasm coerceNumberToInt64 : Number -> Int64 as fromNumber from 'stdlib-external/runtime'
import foreign wasm coerceInt64ToNumber : Int64 -> Number as toNumber from 'stdlib-external/runtime'

import foreign wasm numberIncr : Int64 -> Int64 as incr from 'stdlib-external/runtime'
import foreign wasm numberDecr : Int64 -> Int64 as decr from 'stdlib-external/runtime'
import foreign wasm numberPlus : (Int64, Int64) -> Int64 as plus from 'stdlib-external/runtime'
import foreign wasm numberMinus : (Int64, Int64) -> Int64 as minus from 'stdlib-external/runtime'
import foreign wasm numberTimes : (Int64, Int64) -> Int64 as times from 'stdlib-external/runtime'
import foreign wasm numberDivide : (Int64, Int64) -> Int64 as divide from 'stdlib-external/runtime'
import foreign wasm numberMod : (Int64, Int64) -> Int64 as mod from 'stdlib-external/runtime'

# Int64 comparisons
import foreign wasm numberLess : (Int64, Int64) -> Bool as lt from 'stdlib-external/runtime'
import foreign wasm numberGreater : (Int64, Int64) -> Bool as gt from 'stdlib-external/runtime'
import foreign wasm numberLessEqual : (Int64, Int64) -> Bool as lte from 'stdlib-external/runtime'
import foreign wasm numberGreaterEqual : (Int64, Int64) -> Bool as gte from 'stdlib-external/runtime'

# Int64 bit/logical operations
import foreign wasm numberLnot : Int64 -> Int64 as lnot from 'stdlib-external/runtime'

import foreign wasm numberLand : (Int64, Int64) -> Int64 as land from 'stdlib-external/runtime'
import foreign wasm numberLor : (Int64, Int64) -> Int64 as lor from 'stdlib-external/runtime'
import foreign wasm numberLxor : (Int64, Int64) -> Int64 as lxor from 'stdlib-external/runtime'

import foreign wasm numberLsl : (Int64, Number) -> Int64 as lsl from 'stdlib-external/runtime'
import foreign wasm numberLsr : (Int64, Number) -> Int64 as lsr from 'stdlib-external/runtime'
import foreign wasm numberAsr : (Int64, Number) -> Int64 as asr from 'stdlib-external/runtime'
