import * from 'lists'

let list = [1, 2, 3]

# List.sum

assert sum(list) == 6
assert sum([]) == 0

# List.reverse

assert reverse([]) == []
assert reverse(list) == [3, 2, 1]

# List.length

assert length([]) == 0
assert length(list) == 3

# List.append

assert append(list, [4]) == [1, 2, 3, 4]
assert append([], [4]) == [4]

# List.contains

assert contains(3, list)
assert contains(3, []) == false

# List.map

assert map(x => x + 1, list) == [2, 3, 4]
assert map(x => x * 2, list) == [2, 4, 6]
assert map(x => x + 1, []) == []

# List.mapi

let numbers = [2, 3, 4]
let multiply = (n, i) => n * i

assert mapi(multiply, numbers) == [0, 3, 8]
assert mapi(multiply, []) == []

# List.foldLeft

assert foldLeft((acc, cur) => acc - cur, 0, list) == -6
assert foldLeft((acc, cur) => acc - cur, 0, []) == 0

# List.foldRight

assert foldRight((acc, cur) => acc - cur, 0, list) == 2
assert foldRight((acc, cur) => acc - cur, 0, []) == 0

# List.every

assert every(x => x > 0, list) == true
assert every(x => x > 2, list) == false
assert every(x => x == 3, []) == true

# List.some

assert some(x => x > 0, list) == true
assert some(x => x > 3, list) == false
assert some(x => x == 3, []) == false

# List.filter

assert filter(x => x > 0, list) == list
assert filter(x => x > 3, list) == []
assert filter(x => x == 3, list) == [3]

# List.reject

assert reject(x => x > 0, list) == []
assert reject(x => x > 3, list) == list
assert reject(x => x == 3, list) == [1, 2]

# List.hd

assert hd(list) == 1
assert hd([2]) == 2

# List.tl

assert tl(list) == [2, 3]
assert tl([1]) == []

# List.nth

assert nth(0, list) == 1
assert nth(2, list) == 3

# List.flatten

assert flatten([[1], [2], [3]]) == list
assert flatten([[], list]) == list
assert flatten([list, []]) == list

# List.insert

assert insert(1, 0, []) == [1]
assert insert(0, 0, list) == [0, 1, 2, 3]

# List.count

assert count(x => x > 0, list) == 3
assert count(x => x > 0, []) == 0
assert count(x => x == 3, list) == 1

# List.part

assert part(0, list) == ([], list)
assert part(2, list) == ([1, 2], [3])

# List.rotate

assert rotate(0, list) == list
assert rotate(1, list) == [2, 3, 1]
assert rotate(-2, list) == [2, 3, 1]

# List.uniq

assert uniq([]) == []
assert uniq(list) == list
assert uniq([1, 1, 1, 1]) == [1]
