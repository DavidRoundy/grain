import * from 'lists'

let list = [1, 2, 3]

# List.sum

assert sum(list) == 6
assert sum([]) == 0

# List.reverse

assert reverse([]) == []
assert reverse(list) == [3, 2, 1]

# List.length

assert length([]) == 0
assert length(list) == 3

# List.append

assert append(list, [4]) == [1, 2, 3, 4]
assert append([], [4]) == [4]

# List.contains

assert contains(3, list)
assert contains(3, []) == false

# List.map

assert map(x => x + 1, list) == [2, 3, 4]
assert map(x => x * 2, list) == [2, 4, 6]
assert map(x => x + 1, []) == []

# List.mapi

let numbers = [2, 3, 4]
let multiply = (n, i) => n * i

assert mapi(multiply, numbers) == [0, 3, 8]
assert mapi(multiply, []) == []

# List.foldLeft

assert foldLeft((acc, cur) => acc - cur, 0, list) == -6
assert foldLeft((acc, cur) => acc - cur, 0, []) == 0

# List.foldRight

assert foldRight((acc, cur) => acc - cur, 0, list) == 2
assert foldRight((acc, cur) => acc - cur, 0, []) == 0

# List.every

assert every(x => x > 0, list) == true
assert every(x => x > 2, list) == false
assert every(x => x == 3, []) == true
